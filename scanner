class Scanner implements Closeable {
    private final BufferedReader in;
    private String line = null;
    private StringBuilder builder = new StringBuilder();
    char[] buffer = new char[1024];
    private int read = 0;
    private int ind = 0;

    public Scanner(InputStream is) {
        this.in = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
    }

    public Scanner(File f, String c) throws IOException { // probably String f, String c)
        this.in = new BufferedReader(new InputStreamReader(new FileInputStream(f), c));
    }

    public Scanner(String s) {
        this.in = new BufferedReader(new StringReader(s));
    }

    public boolean hasNextLine() {
        if (line != null) return true;
        try {
            line = in.readLine();
            return line != null;
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    public String nextLine() {
        if (!hasNextLine()) throw new NoSuchElementException("no lines");
        String s = line;
        line = null;
        return s;
    }

    private boolean bufferbuild() {
        try {
            read = in.read(buffer);
            if (read == -1) return false;
            builder.append(buffer, 0, read);
            return true;
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    public boolean hasNext() {
        if (read == -1) return false;
        int n = builder.length();
        if (n == 0 && !bufferbuild()) return false;
        n = builder.length();
        boolean f = true, f1 = true;
        while (Character.isWhitespace(builder.charAt(ind))) {
            if (ind == n - 1) f = bufferbuild();
            if (!(f)) return false;
            ind++;
            f1 = false;
        }
        builder.delete(0, ind);
        ind = 0;
        return true;
    }

    public String next() { // WordStat

        while (read != -1 && !(Character.isWhitespace(builder.charAt(ind)))) {
            if (ind == builder.length() - 1) bufferbuild();
            ind++;
        }
        String ans = builder.substring(0, ind);
        builder.delete(0, ind);
        ind = 0;
        return ans;
    }

    public boolean hasnextInt() {
        int n = builder.length();
        boolean f = true;
        while (Character.isWhitespace(builder.charAt(ind))) {
            if (ind < n) f = bufferbuild();
            if (!(f)) return false;
            ind++;
        }
        return Character.isDigit(builder.charAt(ind));
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    @Override
    public void close() {
        try {
            in.close();
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }
}
