import java.util.*;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.LinkedHashMap;
import java.util.InputMismatchException;
import java.io.*;

public class WordStatLengthMiddle {
    public static void main(String[] args) {

        LinkedHashMap<String, Integer> lhm = new LinkedHashMap<String, Integer>();
        StringBuilder chr = new StringBuilder();

        try {
            Reader reader = new BufferedReader(new InputStreamReader(new FileInputStream(args[0]), "UTF8"));
            try {
                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(args[1]), "UTF8"));
                try {
                    char[] buffer = new char[4096];
                    int read = reader.read(buffer);

                    while (read > -1) {
                        String s = new String(buffer, 0, read);

                        for (int i = 0; i < s.length(); i++) {
                            if (isWordChar(s.charAt(i))) {
                                chr.append(s.charAt(i));
                            } else {
                                String s1 = chr.toString().toLowerCase();
                                chr.setLength(0);
                                if (s1.isEmpty() | s1.length() < 7) {
                                    continue;
                                }
                                lhm.merge(s1.substring(3, s1.length() - 3), 1, Integer::sum);
                            }

                        }
                        read = reader.read(buffer);
                    }

                    String s1 = chr.toString().toLowerCase();
                    if (!(s1.isEmpty()) & s1.length() > 6) {
                        lhm.merge(s1.substring(3, s1.length() - 3), 1, Integer::sum);
                    }
                    chr.setLength(0);
                    List<String> keys = new ArrayList<>(lhm.keySet());
                    keys.sort(Comparator.comparingInt(String::length));

                    for (String key : keys) {
                        writer.write(key + " " + Integer.toString(lhm.get(key)));
                        writer.newLine();
                    }
                } finally {
                    writer.close();
                }
            } finally {
                reader.close();
            }
        } catch (FileNotFoundException e) {
            System.err.println("Input file not found: " + e.getMessage());
        } catch (IOException e) {
            System.err.println("IOException: " + e.getMessage());
        }
    }

    public static boolean isWordChar(char c) {
        return Character.isLetter(c) || c == '\'' || Character.getType(c) == Character.DASH_PUNCTUATION;
    }
}


// java -ea -jar WordStatTest.jar 3637


// To be, or not to be, that is the question:
