import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.LinkedHashMap;
import java.io.*;
import java.util.NoSuchElementException;

class Scanner {
    //Reader reader = new BufferedReader(new InputStreamReader(new FileInputStream("in"), "UTF8"));
    private final BufferedReader in;
    private String line = null;
    private StringBuilder builder;
    char[] buffer = new char[1024;
    private int read = 0;
    private int ind = 0;

    public Scanner(InputStream is) {
        this.in = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
    }

    public Scanner(File f, String c) throws IOException { // probably String f, String c)
        this.in = new BufferedReader(new InputStreamReader(new FileInputStream(f), c));
    }

    public Scanner(String s) {
        this.in = new BufferedReader(new StringReader(s));
    }

    public boolean hasNextLine() {
        if (line != null) return true;
        try {
            line = in.readLine();
            return line != null;
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    public String nextLine() throws IOException {
        if (!hasNextLine()) throw new NoSuchElementException("no lines");
        return in.readLine();
    }

    private boolean vvvvv() throws IOException {
        int cnt = in.read(buffer);
        if (cnt == -1) return false;
        builder.append(buffer, 0, cnt);
        return true;
    }

    public boolean hasNext() throws IOException {
        int n = builder.length();
        boolean f = true;
        while (Character.isWhitespace(builder.charAt(ind))) {
            if (ind < n) f = vvvvv();
            if (!(f)) return false;
            ind++;
        }
        return true;
    }

    public String next() throws IOException { // WordStat
        //StringBuilder sb = new StringBuilder();
        while (!(Character.isWhitespace(builder.charAt(ind)))) {
            if (ind == builder.length()) vvvvv();
            //sb.append(builder.charAt(ind));
            ind++;
        }
        String ans = builder.substring(0, ind);
        builder.delete(0, ind);
        ind = 0;
        return ans;
    }
    /*public int nextInt() {
        return Integer.parseInt(next());
    }

    /*public int nextInt() { //Reverse // i не объявлена
        String s = "";
        int k = ind;
        for (int j = ind; j < l.length(); j++) {
            if (s.isEmpty() & Character.isWhitespace(l.charAt(j))) {
                k = j;
            } else if (Character.isDigit(l.charAt(j))) {
                s += l.charAt(j);
            } else { // тут надо чето дописать, но не помню что
                ind = j + 1;
                int n = Integer.parseInt(s);
                if (l.charAt(j) == '-') n = -n;
                return n;
            }
        }
        if (ind == l.length() - 1 && !(s.isEmpty())) {
            ind = l.length();
            int n = Integer.parseInt(s);
            if (l.charAt(j) == '-') n = -n;
            return n;
        }
        return 0;
    }*/
}


public class WordStat {
    public static void main(String[] args) {

        LinkedHashMap<String, Integer> lhm = new LinkedHashMap<String, Integer>();
        StringBuilder chr = new StringBuilder();

        try {
            Reader reader = new BufferedReader(new InputStreamReader(new FileInputStream(args[0]), "UTF8"));
            try {
                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(args[1]), "UTF8"));
                try {
                    char[] buffer = new char[128];
                    int read = reader.read(buffer);

                    while (read > -1) {
                        String s = new String(buffer, 0, read);

                        for (int i = 0; i < s.length(); i++) {
                            if (IsChar(s.charAt(i))) {
                                chr.append(s.charAt(i));
                            } else {
                                String s1 = chr.toString().toLowerCase();
                                if (s1.isEmpty()) {
                                    continue;
                                }
                                lhm.merge(s1, 1, Integer::sum);
                                chr.setLength(0);
                            }

                        }
                        read = reader.read(buffer);
                    }

                    String s1 = chr.toString().toLowerCase();
                    if (!(s1.isEmpty())) {
                        lhm.merge(s1, 1, Integer::sum);
                    }
                    chr.setLength(0);

                } finally {
                    for (String key : lhm.keySet()) {
                        writer.write(key + " " + Integer.toString(lhm.get(key)));
                        writer.newLine();
                    }
                    writer.close();
                }
            } finally {
                reader.close();
            }
        } catch (FileNotFoundException e) {
            System.err.println("Input file not found: " + e.getMessage());
        } catch (IOException e) {
            System.err.println("IOException: " + e.getMessage());
        }
    }

    public static boolean IsChar(char c) {
        return Character.isLetter(c) || c == '\'' || Character.getType(c) == Character.DASH_PUNCTUATION;
    }
}


// linkedHashmap
